Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/nbclient/client.py", line 1085, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/nbclient/client.py", line 551, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/nbclient/client.py", line 846, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/nbclient/client.py", line 748, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from graspologic.utils import remove_vertices
from graspologic.plot import pairplot
import pandas as pd

# Generate parameters
nodes_per_community = 100
P = np.array([[0.8, 0.2],
              [0.2, 0.8]])

# Generate an undirected Stochastic Block Model (SBM)
undirected, labels_ = sbm(2*[nodes_per_community], P, return_labels=True)
labels = list(labels_)

# Grab out-of-sample vertices
oos_idx = 0
oos_labels = labels.pop(oos_idx)
A, a = remove_vertices(undirected, indices=oos_idx, return_removed=True)

# Generate an embedding with ASE
ase = ASE(n_components=2)
X_hat_ase = ase.fit_transform(A)

# predicted latent positions
w_ase = ase.transform(a)

def plot_oos(X_hat, oos_vertices, labels, oos_labels, title):
    # Plot the in-sample latent positions
    plot = pairplot(X_hat, labels=labels, title=title)

    # generate an out-of-sample dataframe
    oos_vertices = np.atleast_2d(oos_vertices)
    data = {'Type': oos_labels,
          'Dimension 1': oos_vertices[:, 0],
          'Dimension 2': oos_vertices[:, 1]}
    oos_df = pd.DataFrame(data=data)

    # update plot with out-of-sample latent positions,
    # plotting out-of-sample latent positions as stars
    plot.data = oos_df
    plot.hue_vals = oos_df["Type"]
    plot.map_offdiag(sns.scatterplot, s=500,
                     marker="*", edgecolor="black")
    plot.tight_layout()
    return plot

# Plot all latent positions
title = "Star represents previously-unseen neuron (simulated data)"
plot_oos(X_hat_ase, w_ase, labels=labels, oos_labels=[0], title=title);
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
[0;32m/tmp/ipykernel_2955/3368397942.py[0m in [0;36m<module>[0;34m[0m
[1;32m     46[0m [0;31m# Plot all latent positions[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m     47[0m [0mtitle[0m [0;34m=[0m [0;34m"Star represents previously-unseen neuron (simulated data)"[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 48[0;31m [0mplot_oos[0m[0;34m([0m[0mX_hat_ase[0m[0;34m,[0m [0mw_ase[0m[0;34m,[0m [0mlabels[0m[0;34m=[0m[0mlabels[0m[0;34m,[0m [0moos_labels[0m[0;34m=[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m,[0m [0mtitle[0m[0;34m=[0m[0mtitle[0m[0;34m)[0m[0;34m;[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m/tmp/ipykernel_2955/3368397942.py[0m in [0;36mplot_oos[0;34m(X_hat, oos_vertices, labels, oos_labels, title)[0m
[1;32m     39[0m     [0mplot[0m[0;34m.[0m[0mdata[0m [0;34m=[0m [0moos_df[0m[0;34m[0m[0;34m[0m[0m
[1;32m     40[0m     [0mplot[0m[0;34m.[0m[0mhue_vals[0m [0;34m=[0m [0moos_df[0m[0;34m[[0m[0;34m"Type"[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 41[0;31m     plot.map_offdiag(sns.scatterplot, s=500,
[0m[1;32m     42[0m                      marker="*", edgecolor="black")
[1;32m     43[0m     [0mplot[0m[0;34m.[0m[0mtight_layout[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mNameError[0m: name 'sns' is not defined
NameError: name 'sns' is not defined

